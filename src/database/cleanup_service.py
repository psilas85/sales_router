# src/database/cleanup_service.py

from src.database.db_connection import get_connection
from loguru import logger


def limpar_dados_operacionais(nivel: str, tenant_id: int | None = None):
    """
    Limpa os dados operacionais do SalesRouter conforme o n√≠vel de execu√ß√£o.

    Par√¢metros:
        nivel: 'preprocessing' | 'clusterization' | 'routing'
        tenant_id: se informado, filtra apenas os dados do tenant espec√≠fico
    """
    conn = get_connection()
    cur = conn.cursor()

    # Define quais tabelas ser√£o afetadas por n√≠vel
    if nivel == "preprocessing":
        tabelas = [
            "sales_subcluster_pdv",
            "sales_subcluster",
            "cluster_setor_pdv",
            "cluster_setor",
            "cluster_run",
        ]
        logger.info("üßπ Limpando simula√ß√µes operacionais (pr√©-processamento).")

    elif nivel == "clusterization":
        tabelas = [
            "sales_subcluster_pdv",
            "sales_subcluster",
            "cluster_setor_pdv",
            "cluster_setor",
            "cluster_run",
        ]
        logger.info("üßπ Limpando simula√ß√µes operacionais (clusteriza√ß√£o).")

    elif nivel == "routing":
        tabelas = ["sales_subcluster_pdv", "sales_subcluster"]
        logger.info("üßπ Limpando simula√ß√µes operacionais (roteiriza√ß√£o).")

    else:
        raise ValueError(f"N√≠vel de limpeza inv√°lido: {nivel}")

    # Executa limpeza com seguran√ßa ‚Äî filtrando por tenant se informado
    for tabela in tabelas:
        if tenant_id:
            cur.execute(f"DELETE FROM {tabela} WHERE tenant_id = %s;", (tenant_id,))
            logger.debug(f"üßπ Linhas removidas da tabela {tabela} (tenant_id={tenant_id})")
        else:
            cur.execute(f"TRUNCATE TABLE {tabela} CASCADE;")
            logger.debug(f"üßπ Tabela {tabela} truncada completamente.")

    conn.commit()
    cur.close()
    conn.close()
    logger.success("‚úÖ Limpeza conclu√≠da. Snapshots e caches preservados.")
